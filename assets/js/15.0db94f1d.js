(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{429:function(_,v,t){"use strict";t.r(v);var s=t(21),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行上下文"}},[_._v("#")]),_._v(" 1 执行上下文")]),_._v(" "),t("p",[t("strong",[_._v("执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。")])]),_._v(" "),t("h3",{attrs:{id:"执行上下文的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[_._v("#")]),_._v(" 执行上下文的类型")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("全局执行上下文")]),_._v(" ：只有一个，范围是任何不在函数内部的代码都在全局上下文中。创建一个全局window对象，且"),t("code",[_._v("this")]),_._v("指向这个全局对象")]),_._v(" "),t("li",[t("strong",[_._v("函数执行上下文")]),_._v(" ：任意多个，函数被调用时，会为该函数创建一个新的上下文。")]),_._v(" "),t("li",[t("strong",[_._v("Eval函数执行上下文")]),_._v(" ："),t("code",[_._v("eval")]),_._v(" 函数内部也有属于自己的执行上下文")])]),_._v(" "),t("h2",{attrs:{id:"_2-执行栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行栈"}},[_._v("#")]),_._v(" 2 执行栈")]),_._v(" "),t("p",[_._v("执行栈，即调用栈，是一种后进先出（LIFO）数据结构栈，被用来存储代码运行时创建的所有执行上下文")]),_._v(" "),t("p",[_._v("当js代码首次执行时，会创建一个全局的执行上文且亚茹当前执行栈，每当遇到一个函数调用，都创建一个新的执行上下文并压入栈顶。")]),_._v(" "),t("p",[_._v("执行上下文位于栈顶的函数，函数执行结束，执行上下文会从栈中弹出，控制路程进入当前栈的下一个上下文")]),_._v(" "),t("h2",{attrs:{id:"_3-创建执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建执行上下文"}},[_._v("#")]),_._v(" 3 创建执行上下文")]),_._v(" "),t("h3",{attrs:{id:"_3-1-阶段1-创建阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-阶段1-创建阶段"}},[_._v("#")]),_._v(" 3.1 阶段1：创建阶段")]),_._v(" "),t("p",[_._v("创建阶段要做三件事")]),_._v(" "),t("ol",[t("li",[t("code",[_._v("this")]),_._v(" 绑定")]),_._v(" "),t("li",[_._v("创建 "),t("strong",[_._v("词法环境")])]),_._v(" "),t("li",[_._v("创建 "),t("strong",[_._v("变量环境")])])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("ExecutionContext = {  \n  ThisBinding = <this value>,     // 确定this \n  LexicalEnvironment = { ... },   // 词法环境\n  VariableEnvironment = { ... },  // 变量环境\n}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br")])]),t("h4",{attrs:{id:"_3-1-1-this-绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-this-绑定"}},[_._v("#")]),_._v(" 3.1.1 this 绑定")]),_._v(" "),t("ul",[t("li",[_._v("在全局执行上下中，"),t("code",[_._v("this")]),_._v(" 指向全局对象 "),t("code",[_._v("window")]),_._v(" (浏览器中)")]),_._v(" "),t("li",[_._v("在函数执行上下文中, "),t("code",[_._v("this")]),_._v(" 取决于该函数如何被调用的")])]),_._v(" "),t("h4",{attrs:{id:"_3-1-2-词法环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-词法环境"}},[_._v("#")]),_._v(" 3.1.2 词法环境")]),_._v(" "),t("p",[_._v("词法环境内部有两个组件")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("环境记录器")]),_._v(" 是存储变量和函数声明的实际位置")]),_._v(" "),t("li",[t("strong",[_._v("外部环境的引用")]),_._v(" 可以访问其父级词法环境（作用域）")])]),_._v(" "),t("p",[_._v("词法环境有两种类型")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("全局环境")]),_._v(" 是没有外部环境引用的词法环境，它的外部环境引用是 "),t("code",[_._v("null")]),_._v(" 。它拥有内建的 Object/Array/等、在环境记录器内的原型函数（关联全局对象，比如 window 对象）还有任何用户定义的全局变量，并且 this的值指向全局对象。")]),_._v(" "),t("li",[t("strong",[_._v("函数环境")]),_._v(" 函数内部用户定义的变量存储在环境记录器中。并且引用的外部环境可能是全局环境，或者任何包含此内部函数的外部函数。")])]),_._v(" "),t("p",[_._v("环境记录器也有两种类型")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("声明式环境记录器")]),_._v("存储变量、函数和参数。")]),_._v(" "),t("li",[t("strong",[_._v("对象环境记录器")]),_._v("用来定义出现在全局上下文中的变量和函数的关系。")])]),_._v(" "),t("h4",{attrs:{id:"_3-1-2-变量环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-变量环境"}},[_._v("#")]),_._v(" 3.1.2 变量环境")]),_._v(" "),t("ul",[t("li",[_._v("变量环境也是一个词法环境，所以它有着上面定义的词法环境的所有属性。")]),_._v(" "),t("li",[_._v("在 ES6 中，词法环境组件和变量环境的一个不同就是前者被用来存储函数声明和变量（"),t("code",[_._v("let")]),_._v(" 和 "),t("code",[_._v("const")]),_._v("）绑定，而后者只用来存储 "),t("code",[_._v("var")]),_._v(" 变量绑定。")])]),_._v(" "),t("h3",{attrs:{id:"_3-2-阶段2-执行阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-阶段2-执行阶段"}},[_._v("#")]),_._v(" 3.2 阶段2：执行阶段")]),_._v(" "),t("p",[_._v("在此阶段，完成对所有这些变量的分配，最后执行代码。")]),_._v(" "),t("p",[t("strong",[_._v("注意")]),_._v(" : 在执行阶段，如果 JavaScript 引擎不能在源码中声明的实际位置找到 let 变量的值，它会被赋值为 undefined。")])])}),[],!1,null,null,null);v.default=a.exports}}]);