(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{430:function(s,n,a){"use strict";a.r(n);var e=a(21),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("strong",[s._v("闭包是一个可以访问外部作用域的函数，即使这个外部作用域已经执行结束")])]),s._v(" "),a("h2",{attrs:{id:"_1-作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-作用域"}},[s._v("#")]),s._v(" 1 作用域")]),s._v(" "),a("p",[s._v("作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和周期性")]),s._v(" "),a("h3",{attrs:{id:"_1-1-全局作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-全局作用域"}},[s._v("#")]),s._v(" 1.1 全局作用域")]),s._v(" "),a("p",[s._v("任何地方都能访问到的对象拥有全局作用域")]),s._v(" "),a("ol",[a("li",[s._v("函数外定义的变量拥有全局作用域")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var n = 2\nfunction fn(){\n    var a = 1\n    return a\n}\nconsole.log(fn())   // 1\nconsole.log(n)   // 2\nconsole.log(a)   // 报错 error\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("未定义直接赋值的变量自动声明为拥有全局作用域")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var n = 2\nfunction fn(){\n    a = 1\n    return a\n}\nconsole.log(fn())   // 1\nconsole.log(n)   // 2\nconsole.log(a)   // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[s._v("window")]),s._v(" 对象拥有全局作用域")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-局部作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-局部作用域"}},[s._v("#")]),s._v(" 1.2 局部作用域")]),s._v(" "),a("p",[s._v("局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部，所以局部作用域也可称函数作用域")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var n = 2\nfunction fn(){\n    var a = 1\n    return a\n}\nconsole.log(fn())   // 1\nconsole.log(n)   // 2\nconsole.log(a)   // 报错 error\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("a在函数内部声明并赋值，拥有局部作用域，只能在函数fn内部使用，在fn外部访问不到报错。这就是局部作用域的特性，外部无法访问内部，但是内部可以访问外部。")]),s._v(" "),a("ul",[a("li",[s._v("内部函数可以访问外部函数中定义的变量和形参，即使外部函数已经执行完毕。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(function autorun(p){\n    let x = 1;\n    setTimeout(function log(){\n      console.log(x); //1\n      console.log(p); //10\n    }, 10000);\n})(10);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_1-3-es6块级作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-es6块级作用域"}},[s._v("#")]),s._v(" 1.3 ES6块级作用域")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ol",[a("li",[s._v("外层代码块不受内层代码块的影响。内层作用域可以定义外层作用域的同名变量。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{{{{\n  {let insane = 'Hello World'}\n  console.log(insane); // 报错\n}}}};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("ES6 允许块级作用域的任意嵌套。每一层都是一个单独的作用域。")])]),s._v(" "),a("h2",{attrs:{id:"_2-作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域链"}},[s._v("#")]),s._v(" 2 作用域链")]),s._v(" "),a("ol",[a("li",[s._v("当执行函数时，总是先从函数内部找寻局部变量")]),s._v(" "),a("li",[s._v("如果内部找不到（函数的局部作用域没有），则会向创建函数的作用域（声明函数的作用域）寻找，依次向上")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = 1\nfunction fn(){\n    var a = 10;\n    function fn1(){\n        var a = 20\n        console.log(a); //20\n    }\n    function fn2(){\n        console.log(a); // 10\n    }\n    fn1();\n    fn2();\n}\nfn()\nconsole.log(a); // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"_3-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-闭包"}},[s._v("#")]),s._v(" 3 闭包")]),s._v(" "),a("h3",{attrs:{id:"_3-1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-概念"}},[s._v("#")]),s._v(" 3.1 概念")]),s._v(" "),a("ol",[a("li",[s._v("红宝书(p178)上对于闭包的定义：闭包是指有权访问另外一个函数作用域中的变量的函数。")]),s._v(" "),a("li",[s._v("MDN 对闭包的定义为：闭包是指那些能够访问自由变量的函数。")])]),s._v(" "),a("h3",{attrs:{id:"_3-2-闭包的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-闭包的原理"}},[s._v("#")]),s._v(" 3.2 闭包的原理")]),s._v(" "),a("p",[s._v("函数执行分成两个阶段(预编译阶段和执行阶段)。")]),s._v(" "),a("ul",[a("li",[s._v("在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量值，如果已存在“闭包”，则只需要增加对应属性值即可。")]),s._v(" "),a("li",[s._v("执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但其内部函数还持用该“闭包”的引用，所以内部函数可以继续使用“外部函数”中的变量。")])]),s._v(" "),a("p",[s._v("利用了函数作用域链的特性，一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中，函数执行完毕，其执行作用域链销毁，但因内部函数的作用域链仍然在引用这个活动对象，所以其活动对象不会被销毁，直到内部函数被烧毁后才被销毁")]),s._v(" "),a("h3",{attrs:{id:"_3-3-闭包的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-闭包的特性"}},[s._v("#")]),s._v(" 3.3 闭包的特性")]),s._v(" "),a("ol",[a("li",[s._v("函数嵌套函数。")]),s._v(" "),a("li",[s._v("函数内部可以引用外部的参数和变量。")]),s._v(" "),a("li",[s._v("参数和变量不会被垃圾回收机制回收。")])]),s._v(" "),a("h3",{attrs:{id:"_3-4-闭包的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-闭包的优缺点"}},[s._v("#")]),s._v(" 3.4 闭包的优缺点")]),s._v(" "),a("p",[s._v("优点：")]),s._v(" "),a("ul",[a("li",[s._v("可以从内部函数访问外部函数的作用域中的变量，且访问到的变量长期驻扎在内存中，可供之后使用")]),s._v(" "),a("li",[s._v("避免全局变量的污染。")]),s._v(" "),a("li",[s._v("把变量存到独立的作用域，作为私有成员存在\n缺点：")]),s._v(" "),a("li",[s._v("对内存消耗有负面影响。因内部函数保存了对外部变量的引用，导致无法被垃圾回收，增大内存使用量，所以使用不当会导致内存泄漏")]),s._v(" "),a("li",[s._v("对处理速度具有负面影响。闭包的层级决定了引用的外部变量在查找时经过的作用域链长度")])]),s._v(" "),a("h3",{attrs:{id:"_3-5-闭包函数的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-闭包函数的作用"}},[s._v("#")]),s._v(" 3.5 闭包函数的作用")]),s._v(" "),a("h4",{attrs:{id:"_3-5-1-匿名执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-匿名执行函数"}},[s._v("#")]),s._v(" 3.5.1 匿名执行函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var datamodel =[1,2,3];   \n(function(dm){   \n   console.log(dm)        \n})(datamodel);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上诉代码中创建了一个匿名函数，并立即执行，由于外部无法引用它的内部变量，因此在执行完后很快就会被释放，关键是这种机制不会污染全局对象。")]),s._v(" "),a("h4",{attrs:{id:"_3-5-2-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-缓存"}},[s._v("#")]),s._v(" 3.5.2 缓存")]),s._v(" "),a("p",[s._v("如果我们有一个处理过程很耗时的函数对象，每次调用都需要花费很长时间，那么我们就会将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因此它不会释放外部的引用，从而函数内部的值可以得到保留。")]),s._v(" "),a("h4",{attrs:{id:"_3-5-3-实现封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-实现封装"}},[s._v("#")]),s._v(" 3.5.3 实现封装")]),s._v(" "),a("p",[s._v("在函数外部是无法访问其内部变量的，但可以通过闭包的形式来访问。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var person = function(){   \n    //变量作用域为函数内部，外部无法访问   \n    var name = "default";      \n        \n    return {   \n       getName : function(){   \n           return name;   \n       },   \n       setName : function(newName){   \n           name = newName;   \n       }   \n    }   \n}();\nconsole.log(person.name); //直接访问，结果为undefined   \nconsole.log(person.getName());   // default\nperson.setName("abruzzi");   \nconsole.log(person.getName());  // abruzzi\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h4",{attrs:{id:"_3-5-4-实现面向对象的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-实现面向对象的对象"}},[s._v("#")]),s._v(" 3.5.4 实现面向对象的对象")]),s._v(" "),a("p",[s._v("通过闭包可以模拟出类的模板机制，这样不同的对象（类的实例）拥有独立的成员及状态，互不干涉。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function Person(){   \n    var name = "default";      \n        \n    return {   \n       getName : function(){   \n           return name;   \n       },   \n       setName : function(newName){   \n           name = newName;   \n       }   \n    }   \n}; \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);