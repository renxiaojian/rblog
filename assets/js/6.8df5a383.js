(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{414:function(t,_,e){t.exports=e.p+"assets/img/http1.a6f4ae58.png"},415:function(t,_,e){t.exports=e.p+"assets/img/http2.74fe02d1.png"},436:function(t,_,e){"use strict";e.r(_);var a=e(21),r=Object(a.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-浏览器第一次发起http请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器第一次发起http请求"}},[t._v("#")]),t._v(" 1 浏览器第一次发起HTTP请求")]),t._v(" "),a("p",[t._v("浏览器与服务器通信的方式为应答模式，即是："),a("strong",[t._v("浏览器发起HTTP请求 – 服务器响应该请求")]),t._v("。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单过程如下图：")]),t._v(" "),a("img",{attrs:{src:e(414)}}),t._v(" "),a("p",[t._v("浏览器缓存机制的关键:")]),t._v(" "),a("ol",[a("li",[t._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")]),t._v(" "),a("li",[t._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")])]),t._v(" "),a("p",[t._v("是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是强制缓存和协商缓存 。")]),t._v(" "),a("h2",{attrs:{id:"_2-强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-强制缓存"}},[t._v("#")]),t._v(" 2 强制缓存")]),t._v(" "),a("p",[a("strong",[t._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程")])]),t._v(" "),a("p",[t._v("强制缓存的情况分为三种：")]),t._v(" "),a("ol",[a("li",[t._v("不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）")]),t._v(" "),a("li",[t._v("存在该缓存结果和缓存标识，但是结果已经失效，强制缓存失效，则使用协商缓存")]),t._v(" "),a("li",[t._v("存在该缓存结果和缓存标识，且该结果没有还没有失效，强制缓存生效，直接返回该结果")])]),t._v(" "),a("p",[a("strong",[t._v("思考：")]),t._v(" 那么强制缓存的缓存规则是什么？")]),t._v(" "),a("p",[t._v("当浏览器向服务器发送请求的时候，服务器会将缓存规则放入HTTP响应的报文的HTTP头中和请求结果一起返回给浏览器，"),a("strong",[t._v("控制强制缓存的字段分别是Expires和Cache-Control")]),t._v("，其中Cache-Conctrol的优先级比Expires高。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-expires"}},[t._v("#")]),t._v(" 2.1 Expires")]),t._v(" "),a("p",[t._v("Expires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求的结果缓存的到期时间，即再次发送请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。")]),t._v(" "),a("p",[a("strong",[t._v("思考1：")]),t._v(" Expires是HTTP/1.0的字段，但是现在浏览器的默认使用的是HTTP/1.1，那么在HTTP/1.1中网页缓存还是否由Expires控制？")]),t._v(" "),a("p",[t._v("到了HTTP/1.1，Expires已经被Cache-Control替代，原因在于Expires控制缓存的原理是"),a("strong",[t._v("使用客户端的时间与服务端返回的时间做对比")]),t._v("，如果客户端与服务端的时间由于某些原因（时区不同；客户端和服务端有一方的时间不准确）发生误差，那么强制缓存直接失效，那么强制缓存存在的意义就毫无意义。")]),t._v(" "),a("p",[a("strong",[t._v("思考2：")]),t._v(" 那么Cache-Control又是如何进行控制的？")]),t._v(" "),a("h3",{attrs:{id:"_2-2-cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-cache-control"}},[t._v("#")]),t._v(" 2.2 Cache-Control")]),t._v(" "),a("p",[t._v("在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：")]),t._v(" "),a("ul",[a("li",[t._v("public：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),t._v(" "),a("li",[t._v("private：所有内容只有客户端可以缓存，Cache-Control的默认取值")]),t._v(" "),a("li",[t._v("no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定")]),t._v(" "),a("li",[t._v("no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),t._v(" "),a("li",[t._v("max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效")])]),t._v(" "),a("p",[a("strong",[t._v("思考3：")]),t._v(" 浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？")]),t._v(" "),a("p",[t._v("缓存存放的位置，分别为"),a("strong",[t._v("from memory cache")]),t._v(" 和 "),a("strong",[t._v("from disk cache")]),t._v("。from memory cache代表使用内存中的缓存，from disk cache则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为memory –> disk。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-内存缓存-from-memory-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-内存缓存-from-memory-cache"}},[t._v("#")]),t._v(" 2.3 内存缓存(from memory cache)")]),t._v(" "),a("p",[t._v("两个特点：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("快速读取")]),t._v("：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。")]),t._v(" "),a("li",[a("strong",[t._v("时效性")]),t._v("：一旦该进程关闭，则该进程的内存则会清空。")])]),t._v(" "),a("h3",{attrs:{id:"_2-4-硬盘缓存-from-disk-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-硬盘缓存-from-disk-cache"}},[t._v("#")]),t._v(" 2.4 硬盘缓存(from disk cache)")]),t._v(" "),a("p",[t._v("硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("常识：在浏览器中，浏览器会在js和图片等文件解析执行后直接存入内存缓存中，那么当刷新页面时只需直接从内存缓存中读取(from memory cache)；而css文件则会存入硬盘文件中，所以每次渲染页面都需要从硬盘读取缓存(from disk cache)。")]),t._v(" "),a("h2",{attrs:{id:"_3-协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-协商缓存"}},[t._v("#")]),t._v(" 3 协商缓存")]),t._v(" "),a("p",[a("strong",[t._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程")])]),t._v(" "),a("p",[t._v("协商缓存的情况分为两种：")]),t._v(" "),a("ol",[a("li",[t._v("协商缓存生效，返回304，代表该资源无更新")]),t._v(" "),a("li",[t._v("协商缓存失败，返回200和请求结果，代表该资源更新了")])]),t._v(" "),a("p",[t._v("控制协商缓存的字段分别有：Last-Modified / If-Modified-Since和Etag / If-None-Match，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-last-modified-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-last-modified-if-modified-since"}},[t._v("#")]),t._v(" 3.1 Last-Modified / If-Modified-Since")]),t._v(" "),a("ul",[a("li",[t._v("Last-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间")]),t._v(" "),a("li",[t._v("If-Modified-Since则是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-etag-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-etag-if-none-match"}},[t._v("#")]),t._v(" 3.1 Etag / If-None-Match")]),t._v(" "),a("ul",[a("li",[t._v("Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)")]),t._v(" "),a("li",[t._v("If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200")])]),t._v(" "),a("h2",{attrs:{id:"_4-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[t._v("#")]),t._v(" 4 总结")]),t._v(" "),a("p",[t._v("强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存，主要过程如下：")]),t._v(" "),a("img",{staticStyle:{zoom:"90%"},attrs:{src:e(415)}}),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/chengxs/p/10396066.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底理解浏览器的缓存机制（http缓存机制）"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);