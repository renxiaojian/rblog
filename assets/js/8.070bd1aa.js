(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{413:function(n,s,e){n.exports=e.p+"assets/img/5.0af2e440.png"},426:function(n,s,e){"use strict";e.r(s);var t=e(21),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[t("strong",[n._v("定义：")]),n._v(" new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。 ——（来自于MDN）")]),n._v(" "),t("h2",{attrs:{id:"_1-new-实例化过程做了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-new-实例化过程做了什么"}},[n._v("#")]),n._v(" 1 new 实例化过程做了什么？")]),n._v(" "),t("h3",{attrs:{id:"_1-1-栗子1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-栗子1"}},[n._v("#")]),n._v(" 1.1 栗子1")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(){}\nconst person = new Person()\nconsole.log('person',person)\n\nconst obj = new Object()\nconsole.log('obj',obj)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("p",[t("img",{attrs:{src:e(413),alt:"new"}})]),n._v(" "),t("ol",[t("li",[t("code",[n._v("new")]),n._v(" 创建了一个全新的对象")]),n._v(" "),t("li",[n._v("这个对象会被执行 "),t("code",[n._v("__proto__")]),n._v("链接")])]),n._v(" "),t("h3",{attrs:{id:"_1-2-栗子2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-栗子2"}},[n._v("#")]),n._v(" 1.2 栗子2")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name){\n    console.log('赋值前-this',this) // Person {}\n    this.name = name\n    console.log('赋值后-this',this) // Person {name: \"剑\"}\n}\nconst person = new Person('剑') \nconsole.log(person) // Person {name: \"剑\"}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("生成的新对象会绑定到函数调用的 "),t("code",[n._v("this")])]),n._v(" "),t("h3",{attrs:{id:"_1-3-栗子3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-栗子3"}},[n._v("#")]),n._v(" 1.3 栗子3")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name){\n    this.name = name\n}\nPerson.prototype.doSth = function(){\n    console.log(this.name)\n}\nconst person1 = new Person('红') \nconst person2 = new Person('明')\n\n// __proto__ 是浏览器实现的查看原型方案。\nperson1.__proto__ === Person.prototype; // true\nperson2.__proto__ === Person.prototype; // true\n\n// 用ES5 则是：\nObject.getPrototypeOf(person1) === Person.prototype; // true\nObject.getPrototypeOf(person2) === Person.prototype; // true\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[n._v("通过 "),t("code",[n._v("new")]),n._v(" 创建的每个对象将最终被 "),t("code",[n._v("__proto__")]),n._v(" 链接到这个函数的 "),t("code",[n._v("prototype")]),n._v(" 对象上。")]),n._v(" "),t("h3",{attrs:{id:"_1-4-栗子4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-栗子4"}},[n._v("#")]),n._v(" 1.4 栗子4")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Person(name){\n    this.name = name\n    // Null（空） null\n    // Undefined（未定义） undefined\n    // Number（数字） 1\n    // String（字符串）'1'\n    // Boolean（布尔） true\n    // Symbol（符号）（第六版新增） symbol\n\n    // Object（对象） {}\n    // Function（函数） function(){}\n    // Array（数组） []\n    // Date（日期） new Date()\n    // RegExp（正则表达式）/a/\n    // Error （错误） new Error()\n}\nconst person = new Person('剑') \nconsole.log(person)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br")])]),t("p",[n._v("如果函数没有返回对象类型"),t("code",[n._v("Object")]),n._v("(包含"),t("code",[n._v("Functoin")]),n._v(", "),t("code",[n._v("Array")]),n._v(", "),t("code",[n._v("Date")]),n._v(", "),t("code",[n._v("RegExg")]),n._v(", "),t("code",[n._v("Error")]),n._v(")，那么 "),t("code",[n._v("new")]),n._v(" 表达式中的函数调用会自动返回这个新的对象。")]),n._v(" "),t("h3",{attrs:{id:"_1-5-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-小结"}},[n._v("#")]),n._v(" 1.5 小结")]),n._v(" "),t("ol",[t("li",[t("code",[n._v("new")]),n._v(" 创建了一个全新的对象")]),n._v(" "),t("li",[n._v("这个对象会被执行 "),t("code",[n._v("__proto__")]),n._v("链接")]),n._v(" "),t("li",[n._v("生成的新对象会绑定到函数调用的 "),t("code",[n._v("this")])]),n._v(" "),t("li",[n._v("通过 "),t("code",[n._v("new")]),n._v(" 创建的每个对象将最终被 "),t("code",[n._v("__proto__")]),n._v(" 链接到这个函数的 "),t("code",[n._v("prototype")]),n._v(" 对象上。")]),n._v(" "),t("li",[n._v("如果函数没有返回对象类型"),t("code",[n._v("Object")]),n._v("(包含"),t("code",[n._v("Functoin")]),n._v(", "),t("code",[n._v("Array")]),n._v(", "),t("code",[n._v("Date")]),n._v(", "),t("code",[n._v("RegExg")]),n._v(", "),t("code",[n._v("Error")]),n._v(")，那么 "),t("code",[n._v("new")]),n._v(" 表达式中的函数调用会自动返回这个新的对象。")])]),n._v(" "),t("h2",{attrs:{id:"_2-new-模拟实现第一版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-new-模拟实现第一版"}},[n._v("#")]),n._v(" 2 new 模拟实现第一版")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/**\n * 模拟实现 new 操作符\n * @param  {Function} ctor [构造函数]\n * @return {Object|Function|Regex|Date|Error}      [返回结果]\n */\nfunction newOperator(ctor){\n    if(typeof ctor !== 'function'){\n      throw 'newOperator function the first param must be a function';\n    }\n    // ES6 new.target 是指向构造函数\n    newOperator.target = ctor;\n    // 1.创建一个全新的对象，\n    // 2.并且执行[[Prototype]]链接\n    // 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。\n    var newObj = Object.create(ctor.prototype);\n    // ES5 arguments转成数组 当然也可以用ES6 [...arguments], Array.from(arguments);\n    // 除去ctor构造函数的其余参数\n    var argsArr = [].slice.call(arguments, 1);\n    // 3.生成的新对象会绑定到函数调用的`this`。\n    // 获取到ctor函数返回结果\n    var ctorReturnResult = ctor.apply(newObj, argsArr);\n    // 小结4 中这些类型中合并起来只有Object和Function两种类型 typeof null 也是'object'所以要不等于null，排除null\n    var isObject = typeof ctorReturnResult === 'object' && ctorReturnResult !== null;\n    var isFunction = typeof ctorReturnResult === 'function';\n    if(isObject || isFunction){\n        return ctorReturnResult;\n    }\n    // 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`, `Error`)，那么`new`表达式中的函数调用会自动返回这个新的对象。\n    return newObj;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br")])]),t("h2",{attrs:{id:"_3-new-模拟实现第二版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-new-模拟实现第二版"}},[n._v("#")]),n._v(" 3 new 模拟实现第二版")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const isComplexDataType = obj => (typeof obj === 'Object' || typeof obj === 'function') && obj !== null\nfunction objectFactory(){\n    const obj = new Object()\n    const Constructor = [].shift.call(arguments)\n    obj.__proto__ = Constructor.prototype\n    const ret = Constructor.apply(obj, arguments);\n    return isComplexDataType(ret) ? ret : obj\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("ol",[t("li",[n._v("new Object() 创建新对象，且建立"),t("code",[n._v("__proto__")]),n._v("链接")]),n._v(" "),t("li",[n._v("取出构造函数 "),t("code",[n._v("Constructor")]),n._v("，且让新对象的原型指向构造函数的 "),t("code",[n._v("prototype")]),n._v("（这样新对象可以访问到构造函数原型中的属性）")]),n._v(" "),t("li",[t("code",[n._v("apply")]),n._v(" 改变构造函数 "),t("code",[n._v("this")]),n._v(" 的指向到新对象（这样新对象可以访问到构造函数中的属性）")]),n._v(" "),t("li",[n._v("若函数没有返回"),t("code",[n._v("Object")]),n._v("类型，则返回新对象")])]),n._v(" "),t("h2",{attrs:{id:"_4-new-模拟实现第三版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-new-模拟实现第三版"}},[n._v("#")]),n._v(" 4 new 模拟实现第三版")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const isComplexDataType = obj => (typeof obj === 'Object' || typeof obj === 'function') && obj !== null\nfunction _new(){\n    const Constructor = [].shift.call(arguments)\n    const obj = Object.create(Constructor.prototype)\n    const ret = Constructor.apply(obj, arguments);\n    return isComplexDataType(ret) ? ret : obj\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("ol",[t("li",[n._v("获得构造函数，同时删除 arguments 中第一个参数")]),n._v(" "),t("li",[n._v("创建一个新对象且建立链接到原型，obj可以访问构造函数原型中的属性")]),n._v(" "),t("li",[n._v("绑定 "),t("code",[n._v("this")]),n._v(" 实现继承，obj可以访问到构造函数中的属性")]),n._v(" "),t("li",[n._v("优先返回构造函数返回的对象")])])])}),[],!1,null,null,null);s.default=a.exports}}]);