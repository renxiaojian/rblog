(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{427:function(n,s,a){"use strict";a.r(s);var e=a(21),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"结论1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论1"}},[n._v("#")]),n._v(" 结论1")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("console.log(typeof Function.prototype.bind); // function\nconsole.log(typeof Function.prototype.bind());  // function\nconsole.log(Function.prototype.bind.name);  // bind\nconsole.log(Function.prototype.bind().name);  // bound\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("ol",[a("li",[a("code",[n._v("bind")]),n._v(" 是 "),a("code",[n._v("Function")]),n._v(" 原型链中 "),a("code",[n._v("Function.prototype")]),n._v(" 的一个属性，每个函数都可以调用它")]),n._v(" "),a("li",[a("code",[n._v("bind")]),n._v(" 本身是一个名为 "),a("code",[n._v("bind")]),n._v(" 函数，返回值也是函数，函数名是 "),a("code",[n._v("bound")])])]),n._v(" "),a("h2",{attrs:{id:"结论2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论2"}},[n._v("#")]),n._v(" 结论2")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var obj = {\n    name: 'Jack',\n};\nfunction original(a, b){\n    console.log(this.name);\n    console.log([a, b]);\n    return false;\n}\nvar bound = original.bind(obj, 1);\nvar boundResult = bound(2); // 'Jack', [1, 2]\nconsole.log(boundResult); // false\nconsole.log(original.bind.name); // 'bind'\nconsole.log(original.bind.length); // 1\nconsole.log(original.bind().length); // 2 返回original函数的形参个数\nconsole.log(bound.name); // 'bound original'\nconsole.log((function(){}).bind().name); // 'bound '\nconsole.log((function(){}).bind().length); // 0\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("ol",[a("li",[n._v("调用 "),a("code",[n._v("bind")]),n._v(" 的函数中的 "),a("code",[n._v("this")]),n._v(" 指向 "),a("code",[n._v("bind()")]),n._v(" 函数的第一个参数")]),n._v(" "),a("li",[n._v("传给 "),a("code",[n._v("bind")]),n._v(" 的其他参数接受处理了，"),a("code",[n._v("bind()")]),n._v(" 之后返回的函数的参数也接受处理了，也就是说"),a("strong",[n._v("合并处理")]),n._v("了")]),n._v(" "),a("li",[a("code",[n._v("bind()")]),n._v(" 后的 "),a("code",[n._v("name")]),n._v(" 为 "),a("code",[n._v("bound + 空格 + 调用bind的函数名")]),n._v("。匿名函数则是 "),a("code",[n._v("bound + 空格")])]),n._v(" "),a("li",[a("code",[n._v("bind")]),n._v(" 后的返回值函数，执行后返回值是原函数的返回值")]),n._v(" "),a("li",[a("code",[n._v("bind")]),n._v(" 函数形参（即函数的"),a("code",[n._v("length")]),n._v("）是 "),a("code",[n._v("1")]),n._v("。"),a("code",[n._v("bind")]),n._v(" 后返回的 "),a("code",[n._v("bound")]),n._v(" 函数形参不定，更具绑定的函数原函数形参个数确定")])]),n._v(" "),a("h3",{attrs:{id:"实现一个简版的-bindfn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简版的-bindfn"}},[n._v("#")]),n._v(" 实现一个简版的 "),a("code",[n._v("bindFn")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Function.prototype.bindFn = function bind(thisArg){\n    if(typeof this !== 'function'){\n        throw new TypeError(this + 'must be a function')\n    }\n    var self = this;    // 存储函数本身\n    var args = [].slice.call(arguments,1);  // 去除thisArg的第一个参数，转成数组\n    var bound = function(){\n        var bounds = [].slice.call(arguments)   // bound 返回的函数参数转成数组\n        return self.apply(self,args.concat(boundArgs))  // apply修改指向，合并参数\n    }\n    return bound\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("h2",{attrs:{id:"结论3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论3"}},[n._v("#")]),n._v(" 结论3")]),n._v(" "),a("p",[n._v("函数是可以用 "),a("code",[n._v("new")]),n._v(" 来实例化的。那么 "),a("code",[n._v("bind()")]),n._v(" 返回值函数会是什么表现呢。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var obj = { name :'Jack'}\nfunction original(a, b){\n    console.log('this',this);   // original {}\n    console.log('typeof this', typeof this)\n    this.name = b;\n    console.log('name', this.name)\n    console.log('this', this)\n    console.log([a, b])\n}\nvar bound = original.bind(obj, 1)\nvar newBoundResult = new bound(2)\nconsole.log('newBoundResult', newBoundResult)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("ol",[a("li",[a("code",[n._v("bind")]),n._v(" 原先指向 "),a("code",[n._v("obj")]),n._v(" 的失效了，其他参数有效")]),n._v(" "),a("li",[a("code",[n._v("new bound")]),n._v(" 的返回值是以 "),a("code",[n._v("original")]),n._v(" 原函数构造器生成的新对象。 "),a("code",[n._v("original")]),n._v(" 原函数的 "),a("code",[n._v("this")]),n._v(" 指向的就是这个对象")])]),n._v(" "),a("p",[a("strong",[n._v("所以相当于 "),a("code",[n._v("new")]),n._v(" 调用时，bind的返回值函数 "),a("code",[n._v("bound")]),n._v(" 内部要模拟实现new实现的操作。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("Function.prototype.bind = Function.prototype.bind || function bind(thisArg){\n    if(typeof this !== 'function'){\n        throw new TypeError(this + ' must be a function');\n    }\n    var self = this;\n    var args = [].slice.call(arguments, 1);\n    var bound = function(){\n        var boundArgs = [].slice.call(arguments);\n        var finalArgs = args.concat(boundArgs);\n         // new 调用时，其实this instanceof bound判断也不是很准确。es6 new.target就是解决这一问题的。\n        if(this instanceof bound){\n            // self可能是ES6的箭头函数，没有prototype，所以就没必要再指向做prototype操作。\n            if(self.prototype){\n                function Empty(){}\n                Empty.prototype = self.prototype;\n                bound.prototype = new Empty();\n            }\n            var result = self.apply(this, finalArgs);\n            var isObject = typeof result === 'object' && result !== null;\n            var isFunction = typeof result === 'function';\n            if(isObject || isFunction){\n                return result;\n            }\n            return this;\n        }\n        else{\n            return self.apply(thisArg, finalArgs);\n        }\n    };\n    return bound;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br")])]),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const isComplexDataType = obj => (typeof obj === 'Object' || typeof obj === 'function') && obj !== null\n\nconst selfBind = function (bindTarget,...args1) {\n    if(typeof this !== 'function') throw new TypeError('Bind must be called on a function')\n    const originFunc = this\n    const boundFunc = function (...args2) {\n        // 使用new关键字调用返回新对象\n        if(new.target){\n            let res = originFunc.call(this,...args1,...args2)\n            if(isComplexDataType(res)) return res\n            return this\n        } else {\n            originFunc.call(bindTarget,...args1,...args2)\n        }\n    }\n    if(originFcun.prototypr){\n        boundFunc.prototypr = originFcun.prototypr\n    }\n    // 定义绑定后函数的长度和名字\n    const desc = Object.getOwnPropertyDescriptors(originFunc)\n    Object,defineProperties(boundFunc,{\n        length:desc.length,\n        name: Object.assign(desc.name,{\n            value: `bound ${desc.name.value}`\n        })\n    })\n    return boundFunc\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br")])]),a("p",[n._v("实现函数的 bind 方法核心是利用 call 绑定 this 指向，同时考虑了一些其他情况")]),n._v(" "),a("ul",[a("li",[n._v("bind 返回的函数被 new 调用作为构造函数时，绑定的值会失效并且改为 new 指定的对象")]),n._v(" "),a("li",[n._v("定义了绑定后函数的 length 属性和 name 属性（不可枚举属性）")]),n._v(" "),a("li",[n._v("绑定后函数的 prototype 需指向原函数的 prototype")])])])}),[],!1,null,null,null);s.default=t.exports}}]);